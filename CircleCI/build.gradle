plugins {
    id 'org.springframework.boot' version '2.5.7'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'jacoco'
}

group = 'CircleCI'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'io.swagger:swagger-annotations:1.6.3'
    implementation 'io.springfox:springfox-swagger2:3.0.0'
    implementation 'io.springfox:springfox-swagger-ui:3.0.0'

    implementation 'org.springframework.boot:spring-boot-starter-parent:2.5.6'
    implementation 'org.springframework.boot:spring-boot-starter-web:2.5.6'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.5.6'

    compileOnly 'org.projectlombok:lombok:1.18.22'
    runtimeOnly 'com.h2database:h2:1.4.200'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'

    testImplementation('org.springframework.boot:spring-boot-starter-test'){
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    testImplementation"org.mockito:mockito-core:3.3.3"
    testImplementation"org.mockito:mockito-inline:3.6.28"
    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.5.6'
    testImplementation"org.junit.jupiter:junit-jupiter-api:5.4.2"
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.4.2")

    implementation 'junit:junit:4.13.1'



}

test {
    useJUnitPlatform()
}

jacocoTestReport(){
    enabled = false
    reports {
        // xml is usually used to integrate code coverage with
        // other tools like SonarQube, Coveralls or Codecov
        xml.required = true

        // HTML reports can be used to see code coverage
        // without any external tools
        html.required = true

        html.destination file("${buildDir}/jacocoHtml")
    }
}
